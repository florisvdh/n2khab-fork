% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/read_habitatdata.R
\name{read_watersurfaces}
\alias{read_watersurfaces}
\title{Return the data source \code{watersurfaces} as an \code{sf} polygon layer}
\usage{
read_watersurfaces(
  file = NULL,
  extended = FALSE,
  fix_geom = FALSE,
  version = c("watersurfaces_v2024", "watersurfaces_v1.2", "watersurfaces_v1.1",
    "watersurfaces_v1.0")
)
}
\arguments{
\item{file}{Optional string. An absolute or relative file path of
the data source. If left \code{NULL}, the default follows the data management
advice in the vignette on data storage
(run \code{vignette("v020_datastorage")}).
It uses the first \code{n2khab_data} folder that is found when
sequentially climbing up 0 to 10 levels in the file system hierarchy,
starting from the working directory.}

\item{extended}{Logical.
Should names or explanations of codes be added as extra
variables in the result?
Currently only applies to \code{wfd_type} and \code{connectivity};
if \code{TRUE}, the variables \code{wfd_type_name} and
\code{connectivity_name} are added.
Defaults to \code{FALSE}.}

\item{fix_geom}{Logical.
Should invalid or corrupt geometries be fixed in the resulting \code{sf}
object in order to make them valid?
This prevents potential problems in geospatial operations, but beware that
fixed geometries are different from the original ones.
\code{\link[sf:st_make_valid]{sf::st_make_valid()}} is used to fix
geometries (with GEOS as backend).
Defaults to \code{FALSE}.}

\item{version}{Version ID of the data source.
Defaults to the latest available version defined by the package.}
}
\value{
A Simple feature collection of
type \code{POLYGON}, sorted by \code{polygon_id}, with the following
variables (not mentioning extra 'name' variables for
\code{extended = TRUE}):
\itemize{
  \item \code{polygon_id}: code of the polygon;
  \item \code{wfd_code}: optional; Flemish code of the water body with
  regard to the Water Framework Directive (WFD);
  \item \code{hyla_code}: optional (only v1.2 and earlier); code of the
  watersurface according to the Flemish working group 'Hyla', a working group
  on amphibians & reptiles;
  \item \code{name}: name of the watersurface;
  \item \code{area_name}: name of the area;
  \item \code{wfd_type}: type code according to the Flemish WFD typology
  (Denys, 2009);
  \item \code{wfd_type_alternative}: alternative type code according to the
  Flemish WFD typology, in case there is a gradient between different types
  (only version 2024);
  \item \code{wfd_type_certain}: Logical.
  Is there high confidence about the \code{wfd_type} determination?
  \item \code{depth_class}: class of water depth;
  \item \code{connectivity}: connectivity class;
  \item \code{usage}: usage class;
  \item \code{water_level_management}: water-level management class (only
  since v1.2).
}
}
\description{
Returns the raw data source \code{watersurfaces} (Leyssen et al., 2024)
as a standardized \code{sf} polygon layer
(tidyverse-styled, internationalized) in the Belgian Lambert 72 CRS
(EPSG-code \href{https://epsg.io/31370}{31370}).
}
\details{
If \code{file} is not specified, the function will try to read the file
in the default folder for data storage (as described in the data management
advice in the vignette (run \code{vignette("v020_datastorage")})).
If you want to use another file or file structure than the default
data storage, you can specify your own \code{file}.
In both cases: always make sure to specify the correct \code{version}, that
is the version corresponding to the \code{file} (note that the \code{version}
defaults to the latest version).

See Leyssen et al. (2024) for an elaborate explanation of the data source
and its attributes.
}
\examples{
\dontrun{
# This example supposes that your working directory or a directory up to 10
# levels above has the 'n2khab_data' folder AND that the latest version of
# the 'watersurfaces' data source is present in the default subdirectory.
# In all other cases, this example won't work but at least you can
# consider what to do.

ws <- read_watersurfaces()
ws
summary(ws)

ws_valid <- read_watersurfaces(fix_geom = TRUE)
ws_valid

all(sf::st_is_valid(ws))
all(sf::st_is_valid(ws_valid))

ws2 <- read_watersurfaces(extended = TRUE)
ws2
}

}
\references{
\itemize{
\item Denys L. (2009). Een a posteriori typologie van stilstaande, zoete
wateren in Vlaanderen.
Rapporten van het Instituut voor Natuur- en Bosonderzoek INBO.R.2009.34.
Instituut voor Natuur- en Bosonderzoek, Brussel.
\item Leyssen A., Scheers K., Packet J., Van Hecke F., Wils C. (2024).
Watervlakken 2024: Polygonenkaart van stilstaand water in
Vlaanderen. Uitgave 2024. Instituut voor Natuur- en Bosonderzoek.
\doi{10.21436/inbor.114075267}.
}
}
\seealso{
Other functions involved in processing the 'watersurfaces' data source: 
\code{\link{read_watersurfaces_hab}()}

Other functions returning environmental data sets: 
\code{\link{read_shallowgroundwater}()},
\code{\link{read_soilmap}()},
\code{\link{read_watercourse_100mseg}()}
}
\concept{functions involved in processing the 'watersurfaces' data source}
\concept{functions returning environmental data sets}
